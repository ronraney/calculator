{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\halbe\\\\Documents\\\\calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\halbe\\\\Documents\\\\calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\halbe\\\\Documents\\\\calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\halbe\\\\Documents\\\\calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\halbe\\\\Documents\\\\calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\halbe\\\\Documents\\\\calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\halbe\\\\Documents\\\\calculator\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport ButtonPad from './ButtonPad';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      calcDisplay: 'THE HALCULATOR',\n      numInMem: \"\",\n      operator: \"\",\n      numIsNeg: false\n    };\n    _this.addArithmeticOperator = _this.addArithmeticOperator.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.numberClick = _this.numberClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clearDisplay = _this.clearDisplay.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"numberClick\",\n    value: function numberClick(e) {\n      var input = e.target.value;\n      var digit;\n\n      switch (input) {\n        case \"+/-\":\n          // attaches or removes the minus sign and updates our numIsNeg state\n          if (this.state.numIsNeg) {\n            digit = this.state.calcDisplay.slice(1);\n            return this.setState({\n              numIsNeg: false,\n              calcDisplay: digit\n            });\n          } else {\n            digit = \"-\".concat(this.state.calcDisplay);\n            return this.setState({\n              numIsNeg: true,\n              calcDisplay: digit\n            });\n          }\n\n        //adds a decimal point ideally once and only once\n\n        case \".\":\n          this.state.calcDisplay.indexOf(\".\") === -1 ? digit = \"\".concat(this.state.calcDisplay).concat(input) : digit = \"\".concat(this.state.calcDisplay);\n          break;\n\n        default:\n          this.state.calcDisplay !== \"THE HALCULATOR\" || undefined || null ? digit = \"\".concat(this.state.calcDisplay).concat(input) : digit = \"\".concat(input);\n      }\n\n      if (this.state.operator !== '') {\n        digit = \"\".concat(input);\n      } //prevents an unnecessary state change\n\n\n      if (digit !== this.state.calcDisplay) {\n        this.setState({\n          operator: \"\",\n          calcDisplay: digit,\n          numIsNeg: false\n        });\n      }\n    }\n  }, {\n    key: \"addArithmeticOperator\",\n    value: function addArithmeticOperator(e) {\n      var input = e.target.value;\n\n      if (this.state.operator !== '' || input === \"=\") {\n        var output = this.state.numInMem + this.state.calcDisplay; // this.setState({operator : input})\n\n        this.evaluateString(output);\n      } else {\n        // need to write an exeption for this.state.operator===\"=\"\n        this.setState({\n          operator: input,\n          numInMem: \"\".concat(this.state.numInMem).concat(this.state.calcDisplay, \" \").concat(input, \" \"),\n          calcDisplay: this.state.calcDisplay\n        });\n      }\n    } //this switch function stands to get enormous...\n\n  }, {\n    key: \"evaluateString\",\n    value: function evaluateString(string) {\n      var evalArray = string.split(\" \");\n      console.log(evalArray);\n      var answer = Number(evalArray[0]);\n\n      for (var i = 0; i < evalArray.length; i++) {\n        if (isNaN(Number(evalArray[i]))) {\n          switch (evalArray[i]) {\n            case \"+\":\n              answer += Number(evalArray[i + 1]);\n              break;\n\n            case \"-\":\n              answer -= Number(evalArray[i + 1]);\n              break;\n\n            case \"*\":\n              answer = answer * Number(evalArray[i + 1]);\n              break;\n\n            case \"/\":\n              answer = answer / Number(evalArray[i + 1]);\n              break;\n\n            default:\n              console.log(\"What did you do?!?!?!\");\n          }\n        }\n      }\n\n      answer = answer.toString();\n      this.setState({\n        calcDisplay: answer,\n        numInMem: \"\"\n      });\n    }\n  }, {\n    key: \"clearDisplay\",\n    value: function clearDisplay(e) {\n      if (e.target.value === \"AC\") {\n        this.setState({\n          calcDisplay: \"0\",\n          numInMem: \"\",\n          operator: \"\",\n          numIsNeg: false\n        });\n      } else {\n        this.setState({\n          calcDisplay: \"0\"\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var arithmeticOperatorArray = [\"+\", \"-\", \"*\", \"/\", \"=\"];\n      var numbersArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, \".\", 0, \"+/-\"];\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"display-box\",\n        id: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, this.state.calcDisplay), React.createElement(\"div\", {\n        id: \"mainbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(ButtonPad, {\n        type: \"clear\",\n        buttonFunction: this.clearDisplay,\n        typeArray: [\"AC\", \"C\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(ButtonPad, {\n        type: \"numbers\",\n        buttonFunction: this.numberClick,\n        typeArray: numbersArray,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), React.createElement(ButtonPad, {\n        type: \"basic-arithmetic\",\n        buttonFunction: this.addArithmeticOperator,\n        typeArray: arithmeticOperatorArray,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\halbe\\Documents\\calculator\\src\\App.js"],"names":["React","Component","ButtonPad","App","props","state","calcDisplay","numInMem","operator","numIsNeg","addArithmeticOperator","bind","numberClick","clearDisplay","e","input","target","value","digit","slice","setState","indexOf","undefined","output","evaluateString","string","evalArray","split","console","log","answer","Number","i","length","isNaN","toString","arithmeticOperatorArray","numbersArray"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ButtonPad from './ButtonPad';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      calcDisplay: 'THE HALCULATOR',\r\n      numInMem: \"\",\r\n      operator: \"\",\r\n      numIsNeg: false,\r\n\r\n    }\r\n    this.addArithmeticOperator = this.addArithmeticOperator.bind(this);\r\n    this.numberClick = this.numberClick.bind(this);\r\n    this.clearDisplay = this.clearDisplay.bind(this);\r\n  }\r\n\r\n\r\n  numberClick(e) {\r\n\r\n    let input = e.target.value;\r\n    let digit;\r\n    switch(input) {\r\n      case \"+/-\":\r\n        // attaches or removes the minus sign and updates our numIsNeg state\r\n        if(this.state.numIsNeg) {\r\n          digit = this.state.calcDisplay.slice(1);\r\n        return this.setState({\r\n          numIsNeg : false,\r\n          calcDisplay : digit\r\n        });\r\n        } else {\r\n          digit = `-${this.state.calcDisplay}`\r\n        return this.setState({\r\n          numIsNeg: true,\r\n          calcDisplay : digit\r\n        });\r\n        }\r\n\r\n        //adds a decimal point ideally once and only once\r\n      case \".\" :\r\n        this.state.calcDisplay.indexOf(\".\")===-1?\r\n        digit = `${this.state.calcDisplay}${input}`:\r\n        digit = `${this.state.calcDisplay}`;\r\n        break;\r\n      default:\r\n    (this.state.calcDisplay!==\"THE HALCULATOR\"||undefined||null)?\r\n      digit = `${this.state.calcDisplay}${input}`:\r\n      digit = `${input}`;\r\n    }\r\n    if (this.state.operator!=='') {\r\n      digit = `${input}`\r\n    }\r\n    //prevents an unnecessary state change\r\n    if(digit!==this.state.calcDisplay) {\r\n      this.setState({\r\n        operator : \"\",\r\n        calcDisplay: digit,\r\n        numIsNeg : false})\r\n      }\r\n  }\r\n\r\n\r\n\r\n  addArithmeticOperator(e) {\r\n    let input =  (e.target.value);\r\n    if (this.state.operator!==''||input===\"=\") {\r\n      let output = this.state.numInMem+this.state.calcDisplay;\r\n      // this.setState({operator : input})\r\n      this.evaluateString(output);\r\n    } else {\r\n      // need to write an exeption for this.state.operator===\"=\"\r\n    this.setState({\r\n      operator : input,\r\n      numInMem : `${this.state.numInMem}${this.state.calcDisplay} ${input} `,\r\n      calcDisplay : this.state.calcDisplay\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  //this switch function stands to get enormous...\r\n  evaluateString(string) {\r\n    const evalArray = string.split(\" \");\r\n    console.log(evalArray);\r\n    let answer = Number(evalArray[0]);\r\n    for(let i = 0; i<evalArray.length; i++){\r\n      if(isNaN(Number(evalArray[i]))) {\r\n        switch(evalArray[i]) {\r\n          case \"+\":\r\n            answer+=Number(evalArray[i+1]);\r\n            break;\r\n          case \"-\":\r\n            answer-=Number(evalArray[i+1]);\r\n            break;\r\n          case \"*\":\r\n            answer = answer*Number(evalArray[i+1]);\r\n            break;\r\n          case \"/\":\r\n            answer = answer/Number(evalArray[i+1]);\r\n            break;\r\n          default:\r\n            console.log(\"What did you do?!?!?!\");\r\n        }\r\n      }\r\n    }\r\n    answer = answer.toString();\r\n    this.setState({\r\n      calcDisplay : answer,\r\n      numInMem : \"\"\r\n    });\r\n }\r\n\r\n clearDisplay (e) {\r\n   if(e.target.value===\"AC\"){\r\n   this.setState({\r\n     calcDisplay: \"0\",\r\n     numInMem: \"\",\r\n     operator: \"\",\r\n     numIsNeg: false,\r\n   })\r\n } else {\r\n   this.setState({\r\n     calcDisplay: \"0\",\r\n   })\r\n }\r\n }\r\n\r\n  render() {\r\n    const arithmeticOperatorArray = [\"+\",\"-\",\"*\",\"/\",\"=\"]\r\n    const numbersArray = [1,2,3,4,5,6,7,8,9,\".\",0,\"+/-\"]\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1 className=\"display-box\" id=\"title\">{this.state.calcDisplay}</h1>\r\n          <div id=\"mainbox\">\r\n          <ButtonPad\r\n          type=\"clear\"\r\n          buttonFunction={this.clearDisplay}\r\n          typeArray={[\"AC\",\"C\"]}\r\n          />\r\n          <ButtonPad\r\n          type=\"numbers\"\r\n          buttonFunction={this.numberClick}\r\n          typeArray={numbersArray}\r\n          />\r\n          <ButtonPad\r\n          type=\"basic-arithmetic\"\r\n          buttonFunction={this.addArithmeticOperator}\r\n          typeArray={arithmeticOperatorArray}\r\n          />\r\n          </div>\r\n\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}