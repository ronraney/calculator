{"version":3,"sources":["ButtonPad.js","SideScreen.js","App.js","serviceWorker.js","index.js"],"names":["ButtonPad","props","buttonClasses","concat","type","containerClass","react_default","a","createElement","className","typeArray","map","x","id","onClick","buttonFunction","key","value","Component","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","calcDisplay","numInMem","operator","numIsNeg","basicExponentFunc","bind","assertThisInitialized","addArithmeticOperator","numberClick","clearDisplay","e","digit","input","target","indexOf","slice","setState","output","evaluateString","string","evalArray","split","console","log","answer","Number","i","length","isNaN","toString","Math","pow","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be0b6cdc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\n\r\nexport default function ButtonPad(props) {\r\n  const buttonClasses = `${props.type} pad-button`;\r\n  const containerClass = `${props.type} container`\r\n\r\n  return(\r\n    <div className={containerClass}>\r\n    {props.typeArray.map(x=>\r\n        <button\r\n        id={props.type + x}\r\n        onClick={props.buttonFunction}\r\n        key={x}\r\n        value={x}\r\n        className={buttonClasses}\r\n        >{x}\r\n        </button>)}\r\n  </div>\r\n)\r\n}\r\n","import React, { Component } from 'react';\r\nimport ButtonPad from './ButtonPad';\r\n\r\nimport './App.css';\r\n\r\nclass SideScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n    this.basicExponents = [\"x^2\", \"x^3\", \"x^y\"];\r\n  }\r\n\r\n    render() {\r\n      return(\r\n        <div>\r\n        <ButtonPad\r\n        type=\"basicExponents\"\r\n        buttonFunction={this.basicExponentFunc}\r\n        typeArray={this.basicExponents}\r\n        />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  export default SideScreen;\r\n","import React, { Component } from 'react';\r\nimport ButtonPad from './ButtonPad';\r\nimport SideScreen from './SideScreen';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      calcDisplay: 'THE HALCULATOR',\r\n      numInMem: \"\",\r\n      operator: \"\",\r\n      numIsNeg: false,\r\n\r\n    }\r\n    this.basicExponentFunc = this.basicExponentFunc.bind(this);\r\n    this.addArithmeticOperator = this.addArithmeticOperator.bind(this);\r\n    this.numberClick = this.numberClick.bind(this);\r\n    this.clearDisplay = this.clearDisplay.bind(this);\r\n  }\r\n\r\n\r\n  numberClick(e) {\r\n\r\n    let input = e.target.value;\r\n    let digit;\r\n    switch(input) {\r\n\r\n        //adds a decimal point ideally once and only once\r\n      case \".\" :\r\n        this.state.calcDisplay.indexOf(\".\")===-1?\r\n        digit = `${this.state.calcDisplay}${input}`:\r\n        digit = `${this.state.calcDisplay}`;\r\n        break;\r\n      default:\r\n    (this.state.calcDisplay!==\"THE HALCULATOR\"||undefined||null)?\r\n      digit = `${this.state.calcDisplay}${input}`:\r\n      digit = `${input}`;\r\n    }\r\n    if (this.state.operator!=='') {\r\n      digit = `${input}`\r\n    }\r\n    if (digit!==0) {\r\n      if(digit.indexOf(\"0\")===0 && digit.indexOf(\".\")!==1){\r\n      digit=digit.slice(1);\r\n    }\r\n    }\r\n    //prevents an unnecessary state change\r\n    if(digit!==this.state.calcDisplay) {\r\n      this.setState({\r\n        operator : \"\",\r\n        calcDisplay: digit,\r\n        numIsNeg : false})\r\n      }\r\n  }\r\n\r\n\r\n\r\n  addArithmeticOperator(e) {\r\n    let input =  (e.target.value);\r\n    if (this.state.operator!==''||input===\"=\") {\r\n      let output = this.state.numInMem+this.state.calcDisplay;\r\n      // this.setState({operator : input})\r\n      this.evaluateString(output);\r\n    } else {\r\n      // need to write an exeption for this.state.operator===\"=\"\r\n    this.setState({\r\n      operator : input,\r\n      numInMem : `${this.state.numInMem}${this.state.calcDisplay} ${input} `,\r\n      calcDisplay : this.state.calcDisplay\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  //this switch function stands to get enormous...\r\n  evaluateString(string) {\r\n    const evalArray = string.split(\" \");\r\n    console.log(evalArray);\r\n    let answer = Number(evalArray[0]);\r\n    for(let i = 0; i<evalArray.length; i++){\r\n      if(isNaN(Number(evalArray[i]))) {\r\n        switch(evalArray[i]) {\r\n          case \"+\":\r\n            answer+=Number(evalArray[i+1]);\r\n            break;\r\n          case \"-\":\r\n            answer-=Number(evalArray[i+1]);\r\n            break;\r\n          case \"*\":\r\n            answer = answer*Number(evalArray[i+1]);\r\n            break;\r\n          case \"/\":\r\n            answer = answer/Number(evalArray[i+1]);\r\n            break;\r\n          default:\r\n            console.log(\"What did you do?!?!?!\");\r\n        }\r\n      }\r\n    }\r\n    answer = answer.toString();\r\n    this.setState({\r\n      calcDisplay : answer,\r\n      numInMem : \"\"\r\n    });\r\n }\r\n\r\n basicExponentFunc(e) {\r\n   let digit;\r\n   switch (e.target.value) {\r\n     case \"x^2\":\r\n       digit = Math.pow(Number(this.state.calcDisplay), 2).toString();\r\n       break;\r\n     case \"x^3\":\r\n       digit = Math.pow(Number(this.state.calcDisplay), 3).toString();\r\n       break;\r\n     default:\r\n        console.log(\"I dont know yet\")\r\n      }\r\n    this.setState({calcDisplay : digit});\r\n   }\r\n\r\n\r\n clearDisplay (e) {\r\n   let digit;\r\n   if(e.target.value===\"+/-\"){\r\n       // attaches or removes the minus sign and updates our numIsNeg state\r\n       if(this.state.numIsNeg) {\r\n         digit = this.state.calcDisplay.slice(1);\r\n       return this.setState({\r\n         numIsNeg : false,\r\n         calcDisplay : digit\r\n       });\r\n       } else {\r\n         digit = `-${this.state.calcDisplay}`\r\n       return this.setState({\r\n         numIsNeg: true,\r\n         calcDisplay : digit\r\n       });\r\n       }\r\n     }\r\n    if(e.target.value===\"%\"){\r\n      digit=Number(this.state.calcDisplay)*.01;\r\n      this.setState({calcDisplay: digit})\r\n } else {\r\n   this.setState({\r\n     calcDisplay: \"0\",\r\n   })\r\n }\r\n }\r\n\r\n  render() {\r\n    const arithmeticOperatorArray = [\"+\",\"-\",\"*\",\"/\",\"=\"]\r\n    const numbersArray = [1,2,3,4,5,6,7,8,9,0,\".\"]\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1 className=\"display-box\" id=\"title\">{this.state.calcDisplay}</h1>\r\n        </header>\r\n        <div id=\"keyboard-box\">\r\n          <div id=\"mainbox\">\r\n            <div id=\"numbers-clear-box\">\r\n            <ButtonPad\r\n            type=\"clear\"\r\n            buttonFunction={this.clearDisplay}\r\n            typeArray={[\"C\",\"+/-\",\"%\"]}\r\n            />\r\n            <ButtonPad\r\n            type=\"numbers\"\r\n            buttonFunction={this.numberClick}\r\n            typeArray={numbersArray}\r\n            />\r\n            </div>\r\n          <ButtonPad\r\n          type=\"basic-arithmetic\"\r\n          buttonFunction={this.addArithmeticOperator}\r\n          typeArray={arithmeticOperatorArray}\r\n          />\r\n          </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}